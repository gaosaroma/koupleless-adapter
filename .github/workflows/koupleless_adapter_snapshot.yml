name: Koupleless Adapter Snapshot
on:
  workflow_dispatch:

jobs:
  relase_for_jdk8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Finding Maven Modules
        id: find-maven-modules
        run: |
          echo "Finding Maven Modules"
          # 定位 pom.xml 文件，通过 grep 排除掉根目录下的 pom.xml
          modules=$(find . -name pom.xml -maxdepth 2 -not -path "./pom.xml" -exec dirname {} \;)
          echo "$modules"
          # 使用 jq 将 shell 数组转换成 JSON 数组供后续步骤使用
          modules_in_json=$(echo $modules | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "$modules_in_json"
          echo "modules-list=$modules_in_json" >> $GITHUB_OUTPUT


      - name: release adapter for jdk8
        run: |
          # 创建一个映射来存储模块名到 JDK 版本的映射
          modules=(${{ join(fromJSON(steps.find-maven-modules.outputs.modules-list), ' ') }})
          modules_in_right_jdk_array=()
          for module in "${modules[@]}"; do
            # 读取模块中的 pom.xml 来确定 JDK 版本
            jdk_version=$(grep -m 1 '<java.version>' $module/pom.xml | sed 's/<[^>]*>//g' | xargs)
            echo "${module} JDK version: ${jdk_version}"
          
            # 如果是目标 jdk 版本，则记录
            if [[ "${jdk_version}" == "1.8" ]]; then
              modules_in_right_jdk_array+=(${module})
            fi
          done
          
          # 过滤出需要发布的 adapter，过滤条件：adapter 版本与 pom.xml 中的版本一致
          adapter_snapshot_version=$(grep '<revision>' pom.xml | sed -e 's/.*<revision>\(.*\)<\/revision>.*/\1/' | tr -d ' ')
          modules_in_snapshot_version=""
          for module in "${modules_in_right_jdk_array[@]}"; do
            # 如果没有 adapter-mapping.yaml，则跳过（ koupleless-adapter-configs 没有 adapter-mapping.yaml）
            if [[ ! -f $module/conf/adapter-mapping.yaml ]]; then
              continue
            fi
          
            # 读取模块中的 adapter-mapping.yaml 来确定 adapter 版本
            adapter_version=$(grep 'version:' $module/conf/adapter-mapping.yaml | sed -e 's/.*version:\(.*\)/\1/' | tr -d ' ')
            echo "${module} adapter version: ${adapter_version}"
          
            # 如果是目标 adapter 版本，则记录
            if [[ "${adapter_version}" == "${adapter_snapshot_version}" ]]; then
              modules_in_snapshot_version="${modules_in_snapshot_version}${module},"
            fi
          done
          
          if [[ -n ${modules_in_snapshot_version} ]]; then
            modules_in_snapshot_version="${modules_in_snapshot_version:0:-1}"
            echo "release for module ${modules_in_snapshot_version}"
            mvn --batch-mode deploy -Psnapshot -pl ${modules_in_snapshot_version} -am -amd -B -U
            echo "release completed for module ${modules_in_snapshot_version}"
          fi
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
